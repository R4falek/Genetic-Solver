Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ID

Grammar

Rule 0     S' -> program
Rule 1     program -> main
Rule 2     empty -> <empty>
Rule 3     main -> MAIN LPC instructions RPC
Rule 4     instructions -> instruction
Rule 5     instructions -> instruction instructions
Rule 6     instructions -> empty
Rule 7     instruction -> loop
Rule 8     instruction -> condition
Rule 9     instruction -> var_assignment
Rule 10    instruction -> read
Rule 11    instruction -> write
Rule 12    instruction -> empty
Rule 13    loop -> LOOP LP comparisons RP LPC instructions RPC
Rule 14    condition -> CONDITION LP comparisons RP LPC instructions RPC
Rule 15    comparisons -> comparison
Rule 16    comparisons -> comparison logic_operator comparison
Rule 17    comparison -> NAME EQUALS number
Rule 18    comparison -> NAME EQUALS NAME
Rule 19    number -> INTEGER_NUMBER
Rule 20    var_assignment -> NAME EQUAL number
Rule 21    var_assignment -> NAME EQUAL NAME
Rule 22    var_assignment -> NAME EQUAL math_operation
Rule 23    math_operator -> PLUS
Rule 24    math_operator -> MINUS
Rule 25    math_operator -> STAR
Rule 26    math_operator -> SLASH
Rule 27    math_operation -> NAME math_operator NAME
Rule 28    math_operation -> NAME math_operator number
Rule 29    math_operation -> number math_operator number
Rule 30    logic_operator -> AND
Rule 31    logic_operator -> OR
Rule 32    read -> READ LP NAME RP
Rule 33    write -> WRITE LP NAME RP

Terminals, with rules where they appear

AND                  : 30
CONDITION            : 14
EQUAL                : 20 21 22
EQUALS               : 17 18
ID                   : 
INTEGER_NUMBER       : 19
LOOP                 : 13
LP                   : 13 14 32 33
LPC                  : 3 13 14
MAIN                 : 3
MINUS                : 24
NAME                 : 17 18 18 20 21 21 22 27 27 28 32 33
OR                   : 31
PLUS                 : 23
READ                 : 32
RP                   : 13 14 32 33
RPC                  : 3 13 14
SLASH                : 26
STAR                 : 25
WRITE                : 33
error                : 

Nonterminals, with rules where they appear

comparison           : 15 16 16
comparisons          : 13 14
condition            : 8
empty                : 6 12
instruction          : 4 5
instructions         : 3 5 13 14
logic_operator       : 16
loop                 : 7
main                 : 1
math_operation       : 22
math_operator        : 27 28 29
number               : 17 20 28 29 29
program              : 0
read                 : 10
var_assignment       : 9
write                : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . main
    (3) main -> . MAIN LPC instructions RPC

    MAIN            shift and go to state 3

    program                        shift and go to state 1
    main                           shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> main .

    $end            reduce using rule 1 (program -> main .)


state 3

    (3) main -> MAIN . LPC instructions RPC

    LPC             shift and go to state 4


state 4

    (3) main -> MAIN LPC . instructions RPC
    (4) instructions -> . instruction
    (5) instructions -> . instruction instructions
    (6) instructions -> . empty
    (7) instruction -> . loop
    (8) instruction -> . condition
    (9) instruction -> . var_assignment
    (10) instruction -> . read
    (11) instruction -> . write
    (12) instruction -> . empty
    (2) empty -> .
    (13) loop -> . LOOP LP comparisons RP LPC instructions RPC
    (14) condition -> . CONDITION LP comparisons RP LPC instructions RPC
    (20) var_assignment -> . NAME EQUAL number
    (21) var_assignment -> . NAME EQUAL NAME
    (22) var_assignment -> . NAME EQUAL math_operation
    (32) read -> . READ LP NAME RP
    (33) write -> . WRITE LP NAME RP

  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for CONDITION resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
    RPC             reduce using rule 2 (empty -> .)
    LOOP            shift and go to state 13
    CONDITION       shift and go to state 14
    NAME            shift and go to state 15
    READ            shift and go to state 16
    WRITE           shift and go to state 17

  ! LOOP            [ reduce using rule 2 (empty -> .) ]
  ! CONDITION       [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! READ            [ reduce using rule 2 (empty -> .) ]
  ! WRITE           [ reduce using rule 2 (empty -> .) ]

    instructions                   shift and go to state 5
    instruction                    shift and go to state 6
    empty                          shift and go to state 7
    loop                           shift and go to state 8
    condition                      shift and go to state 9
    var_assignment                 shift and go to state 10
    read                           shift and go to state 11
    write                          shift and go to state 12

state 5

    (3) main -> MAIN LPC instructions . RPC

    RPC             shift and go to state 18


state 6

    (4) instructions -> instruction .
    (5) instructions -> instruction . instructions
    (4) instructions -> . instruction
    (5) instructions -> . instruction instructions
    (6) instructions -> . empty
    (7) instruction -> . loop
    (8) instruction -> . condition
    (9) instruction -> . var_assignment
    (10) instruction -> . read
    (11) instruction -> . write
    (12) instruction -> . empty
    (2) empty -> .
    (13) loop -> . LOOP LP comparisons RP LPC instructions RPC
    (14) condition -> . CONDITION LP comparisons RP LPC instructions RPC
    (20) var_assignment -> . NAME EQUAL number
    (21) var_assignment -> . NAME EQUAL NAME
    (22) var_assignment -> . NAME EQUAL math_operation
    (32) read -> . READ LP NAME RP
    (33) write -> . WRITE LP NAME RP

  ! reduce/reduce conflict for RPC resolved using rule 2 (empty -> .)
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for CONDITION resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
    RPC             reduce using rule 2 (empty -> .)
    LOOP            shift and go to state 13
    CONDITION       shift and go to state 14
    NAME            shift and go to state 15
    READ            shift and go to state 16
    WRITE           shift and go to state 17

  ! RPC             [ reduce using rule 4 (instructions -> instruction .) ]
  ! LOOP            [ reduce using rule 2 (empty -> .) ]
  ! CONDITION       [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! READ            [ reduce using rule 2 (empty -> .) ]
  ! WRITE           [ reduce using rule 2 (empty -> .) ]

    instruction                    shift and go to state 6
    instructions                   shift and go to state 19
    empty                          shift and go to state 7
    loop                           shift and go to state 8
    condition                      shift and go to state 9
    var_assignment                 shift and go to state 10
    read                           shift and go to state 11
    write                          shift and go to state 12

state 7

    (6) instructions -> empty .
    (12) instruction -> empty .

  ! reduce/reduce conflict for RPC resolved using rule 6 (instructions -> empty .)
    RPC             reduce using rule 6 (instructions -> empty .)
    LOOP            reduce using rule 12 (instruction -> empty .)
    CONDITION       reduce using rule 12 (instruction -> empty .)
    NAME            reduce using rule 12 (instruction -> empty .)
    READ            reduce using rule 12 (instruction -> empty .)
    WRITE           reduce using rule 12 (instruction -> empty .)

  ! RPC             [ reduce using rule 12 (instruction -> empty .) ]


state 8

    (7) instruction -> loop .

    LOOP            reduce using rule 7 (instruction -> loop .)
    CONDITION       reduce using rule 7 (instruction -> loop .)
    NAME            reduce using rule 7 (instruction -> loop .)
    READ            reduce using rule 7 (instruction -> loop .)
    WRITE           reduce using rule 7 (instruction -> loop .)
    RPC             reduce using rule 7 (instruction -> loop .)


state 9

    (8) instruction -> condition .

    LOOP            reduce using rule 8 (instruction -> condition .)
    CONDITION       reduce using rule 8 (instruction -> condition .)
    NAME            reduce using rule 8 (instruction -> condition .)
    READ            reduce using rule 8 (instruction -> condition .)
    WRITE           reduce using rule 8 (instruction -> condition .)
    RPC             reduce using rule 8 (instruction -> condition .)


state 10

    (9) instruction -> var_assignment .

    LOOP            reduce using rule 9 (instruction -> var_assignment .)
    CONDITION       reduce using rule 9 (instruction -> var_assignment .)
    NAME            reduce using rule 9 (instruction -> var_assignment .)
    READ            reduce using rule 9 (instruction -> var_assignment .)
    WRITE           reduce using rule 9 (instruction -> var_assignment .)
    RPC             reduce using rule 9 (instruction -> var_assignment .)


state 11

    (10) instruction -> read .

    LOOP            reduce using rule 10 (instruction -> read .)
    CONDITION       reduce using rule 10 (instruction -> read .)
    NAME            reduce using rule 10 (instruction -> read .)
    READ            reduce using rule 10 (instruction -> read .)
    WRITE           reduce using rule 10 (instruction -> read .)
    RPC             reduce using rule 10 (instruction -> read .)


state 12

    (11) instruction -> write .

    LOOP            reduce using rule 11 (instruction -> write .)
    CONDITION       reduce using rule 11 (instruction -> write .)
    NAME            reduce using rule 11 (instruction -> write .)
    READ            reduce using rule 11 (instruction -> write .)
    WRITE           reduce using rule 11 (instruction -> write .)
    RPC             reduce using rule 11 (instruction -> write .)


state 13

    (13) loop -> LOOP . LP comparisons RP LPC instructions RPC

    LP              shift and go to state 20


state 14

    (14) condition -> CONDITION . LP comparisons RP LPC instructions RPC

    LP              shift and go to state 21


state 15

    (20) var_assignment -> NAME . EQUAL number
    (21) var_assignment -> NAME . EQUAL NAME
    (22) var_assignment -> NAME . EQUAL math_operation

    EQUAL           shift and go to state 22


state 16

    (32) read -> READ . LP NAME RP

    LP              shift and go to state 23


state 17

    (33) write -> WRITE . LP NAME RP

    LP              shift and go to state 24


state 18

    (3) main -> MAIN LPC instructions RPC .

    $end            reduce using rule 3 (main -> MAIN LPC instructions RPC .)


state 19

    (5) instructions -> instruction instructions .

    RPC             reduce using rule 5 (instructions -> instruction instructions .)


state 20

    (13) loop -> LOOP LP . comparisons RP LPC instructions RPC
    (15) comparisons -> . comparison
    (16) comparisons -> . comparison logic_operator comparison
    (17) comparison -> . NAME EQUALS number
    (18) comparison -> . NAME EQUALS NAME

    NAME            shift and go to state 27

    comparisons                    shift and go to state 25
    comparison                     shift and go to state 26

state 21

    (14) condition -> CONDITION LP . comparisons RP LPC instructions RPC
    (15) comparisons -> . comparison
    (16) comparisons -> . comparison logic_operator comparison
    (17) comparison -> . NAME EQUALS number
    (18) comparison -> . NAME EQUALS NAME

    NAME            shift and go to state 27

    comparisons                    shift and go to state 28
    comparison                     shift and go to state 26

state 22

    (20) var_assignment -> NAME EQUAL . number
    (21) var_assignment -> NAME EQUAL . NAME
    (22) var_assignment -> NAME EQUAL . math_operation
    (19) number -> . INTEGER_NUMBER
    (27) math_operation -> . NAME math_operator NAME
    (28) math_operation -> . NAME math_operator number
    (29) math_operation -> . number math_operator number

    NAME            shift and go to state 29
    INTEGER_NUMBER  shift and go to state 32

    number                         shift and go to state 30
    math_operation                 shift and go to state 31

state 23

    (32) read -> READ LP . NAME RP

    NAME            shift and go to state 33


state 24

    (33) write -> WRITE LP . NAME RP

    NAME            shift and go to state 34


state 25

    (13) loop -> LOOP LP comparisons . RP LPC instructions RPC

    RP              shift and go to state 35


state 26

    (15) comparisons -> comparison .
    (16) comparisons -> comparison . logic_operator comparison
    (30) logic_operator -> . AND
    (31) logic_operator -> . OR

    RP              reduce using rule 15 (comparisons -> comparison .)
    AND             shift and go to state 37
    OR              shift and go to state 38

    logic_operator                 shift and go to state 36

state 27

    (17) comparison -> NAME . EQUALS number
    (18) comparison -> NAME . EQUALS NAME

    EQUALS          shift and go to state 39


state 28

    (14) condition -> CONDITION LP comparisons . RP LPC instructions RPC

    RP              shift and go to state 40


state 29

    (21) var_assignment -> NAME EQUAL NAME .
    (27) math_operation -> NAME . math_operator NAME
    (28) math_operation -> NAME . math_operator number
    (23) math_operator -> . PLUS
    (24) math_operator -> . MINUS
    (25) math_operator -> . STAR
    (26) math_operator -> . SLASH

    LOOP            reduce using rule 21 (var_assignment -> NAME EQUAL NAME .)
    CONDITION       reduce using rule 21 (var_assignment -> NAME EQUAL NAME .)
    NAME            reduce using rule 21 (var_assignment -> NAME EQUAL NAME .)
    READ            reduce using rule 21 (var_assignment -> NAME EQUAL NAME .)
    WRITE           reduce using rule 21 (var_assignment -> NAME EQUAL NAME .)
    RPC             reduce using rule 21 (var_assignment -> NAME EQUAL NAME .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    STAR            shift and go to state 44
    SLASH           shift and go to state 45

    math_operator                  shift and go to state 41

state 30

    (20) var_assignment -> NAME EQUAL number .
    (29) math_operation -> number . math_operator number
    (23) math_operator -> . PLUS
    (24) math_operator -> . MINUS
    (25) math_operator -> . STAR
    (26) math_operator -> . SLASH

    LOOP            reduce using rule 20 (var_assignment -> NAME EQUAL number .)
    CONDITION       reduce using rule 20 (var_assignment -> NAME EQUAL number .)
    NAME            reduce using rule 20 (var_assignment -> NAME EQUAL number .)
    READ            reduce using rule 20 (var_assignment -> NAME EQUAL number .)
    WRITE           reduce using rule 20 (var_assignment -> NAME EQUAL number .)
    RPC             reduce using rule 20 (var_assignment -> NAME EQUAL number .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    STAR            shift and go to state 44
    SLASH           shift and go to state 45

    math_operator                  shift and go to state 46

state 31

    (22) var_assignment -> NAME EQUAL math_operation .

    LOOP            reduce using rule 22 (var_assignment -> NAME EQUAL math_operation .)
    CONDITION       reduce using rule 22 (var_assignment -> NAME EQUAL math_operation .)
    NAME            reduce using rule 22 (var_assignment -> NAME EQUAL math_operation .)
    READ            reduce using rule 22 (var_assignment -> NAME EQUAL math_operation .)
    WRITE           reduce using rule 22 (var_assignment -> NAME EQUAL math_operation .)
    RPC             reduce using rule 22 (var_assignment -> NAME EQUAL math_operation .)


state 32

    (19) number -> INTEGER_NUMBER .

    PLUS            reduce using rule 19 (number -> INTEGER_NUMBER .)
    MINUS           reduce using rule 19 (number -> INTEGER_NUMBER .)
    STAR            reduce using rule 19 (number -> INTEGER_NUMBER .)
    SLASH           reduce using rule 19 (number -> INTEGER_NUMBER .)
    LOOP            reduce using rule 19 (number -> INTEGER_NUMBER .)
    CONDITION       reduce using rule 19 (number -> INTEGER_NUMBER .)
    NAME            reduce using rule 19 (number -> INTEGER_NUMBER .)
    READ            reduce using rule 19 (number -> INTEGER_NUMBER .)
    WRITE           reduce using rule 19 (number -> INTEGER_NUMBER .)
    RPC             reduce using rule 19 (number -> INTEGER_NUMBER .)
    AND             reduce using rule 19 (number -> INTEGER_NUMBER .)
    OR              reduce using rule 19 (number -> INTEGER_NUMBER .)
    RP              reduce using rule 19 (number -> INTEGER_NUMBER .)


state 33

    (32) read -> READ LP NAME . RP

    RP              shift and go to state 47


state 34

    (33) write -> WRITE LP NAME . RP

    RP              shift and go to state 48


state 35

    (13) loop -> LOOP LP comparisons RP . LPC instructions RPC

    LPC             shift and go to state 49


state 36

    (16) comparisons -> comparison logic_operator . comparison
    (17) comparison -> . NAME EQUALS number
    (18) comparison -> . NAME EQUALS NAME

    NAME            shift and go to state 27

    comparison                     shift and go to state 50

state 37

    (30) logic_operator -> AND .

    NAME            reduce using rule 30 (logic_operator -> AND .)


state 38

    (31) logic_operator -> OR .

    NAME            reduce using rule 31 (logic_operator -> OR .)


state 39

    (17) comparison -> NAME EQUALS . number
    (18) comparison -> NAME EQUALS . NAME
    (19) number -> . INTEGER_NUMBER

    NAME            shift and go to state 51
    INTEGER_NUMBER  shift and go to state 32

    number                         shift and go to state 52

state 40

    (14) condition -> CONDITION LP comparisons RP . LPC instructions RPC

    LPC             shift and go to state 53


state 41

    (27) math_operation -> NAME math_operator . NAME
    (28) math_operation -> NAME math_operator . number
    (19) number -> . INTEGER_NUMBER

    NAME            shift and go to state 54
    INTEGER_NUMBER  shift and go to state 32

    number                         shift and go to state 55

state 42

    (23) math_operator -> PLUS .

    NAME            reduce using rule 23 (math_operator -> PLUS .)
    INTEGER_NUMBER  reduce using rule 23 (math_operator -> PLUS .)


state 43

    (24) math_operator -> MINUS .

    NAME            reduce using rule 24 (math_operator -> MINUS .)
    INTEGER_NUMBER  reduce using rule 24 (math_operator -> MINUS .)


state 44

    (25) math_operator -> STAR .

    NAME            reduce using rule 25 (math_operator -> STAR .)
    INTEGER_NUMBER  reduce using rule 25 (math_operator -> STAR .)


state 45

    (26) math_operator -> SLASH .

    NAME            reduce using rule 26 (math_operator -> SLASH .)
    INTEGER_NUMBER  reduce using rule 26 (math_operator -> SLASH .)


state 46

    (29) math_operation -> number math_operator . number
    (19) number -> . INTEGER_NUMBER

    INTEGER_NUMBER  shift and go to state 32

    number                         shift and go to state 56

state 47

    (32) read -> READ LP NAME RP .

    LOOP            reduce using rule 32 (read -> READ LP NAME RP .)
    CONDITION       reduce using rule 32 (read -> READ LP NAME RP .)
    NAME            reduce using rule 32 (read -> READ LP NAME RP .)
    READ            reduce using rule 32 (read -> READ LP NAME RP .)
    WRITE           reduce using rule 32 (read -> READ LP NAME RP .)
    RPC             reduce using rule 32 (read -> READ LP NAME RP .)


state 48

    (33) write -> WRITE LP NAME RP .

    LOOP            reduce using rule 33 (write -> WRITE LP NAME RP .)
    CONDITION       reduce using rule 33 (write -> WRITE LP NAME RP .)
    NAME            reduce using rule 33 (write -> WRITE LP NAME RP .)
    READ            reduce using rule 33 (write -> WRITE LP NAME RP .)
    WRITE           reduce using rule 33 (write -> WRITE LP NAME RP .)
    RPC             reduce using rule 33 (write -> WRITE LP NAME RP .)


state 49

    (13) loop -> LOOP LP comparisons RP LPC . instructions RPC
    (4) instructions -> . instruction
    (5) instructions -> . instruction instructions
    (6) instructions -> . empty
    (7) instruction -> . loop
    (8) instruction -> . condition
    (9) instruction -> . var_assignment
    (10) instruction -> . read
    (11) instruction -> . write
    (12) instruction -> . empty
    (2) empty -> .
    (13) loop -> . LOOP LP comparisons RP LPC instructions RPC
    (14) condition -> . CONDITION LP comparisons RP LPC instructions RPC
    (20) var_assignment -> . NAME EQUAL number
    (21) var_assignment -> . NAME EQUAL NAME
    (22) var_assignment -> . NAME EQUAL math_operation
    (32) read -> . READ LP NAME RP
    (33) write -> . WRITE LP NAME RP

  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for CONDITION resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
    RPC             reduce using rule 2 (empty -> .)
    LOOP            shift and go to state 13
    CONDITION       shift and go to state 14
    NAME            shift and go to state 15
    READ            shift and go to state 16
    WRITE           shift and go to state 17

  ! LOOP            [ reduce using rule 2 (empty -> .) ]
  ! CONDITION       [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! READ            [ reduce using rule 2 (empty -> .) ]
  ! WRITE           [ reduce using rule 2 (empty -> .) ]

    instructions                   shift and go to state 57
    instruction                    shift and go to state 6
    empty                          shift and go to state 7
    loop                           shift and go to state 8
    condition                      shift and go to state 9
    var_assignment                 shift and go to state 10
    read                           shift and go to state 11
    write                          shift and go to state 12

state 50

    (16) comparisons -> comparison logic_operator comparison .

    RP              reduce using rule 16 (comparisons -> comparison logic_operator comparison .)


state 51

    (18) comparison -> NAME EQUALS NAME .

    AND             reduce using rule 18 (comparison -> NAME EQUALS NAME .)
    OR              reduce using rule 18 (comparison -> NAME EQUALS NAME .)
    RP              reduce using rule 18 (comparison -> NAME EQUALS NAME .)


state 52

    (17) comparison -> NAME EQUALS number .

    AND             reduce using rule 17 (comparison -> NAME EQUALS number .)
    OR              reduce using rule 17 (comparison -> NAME EQUALS number .)
    RP              reduce using rule 17 (comparison -> NAME EQUALS number .)


state 53

    (14) condition -> CONDITION LP comparisons RP LPC . instructions RPC
    (4) instructions -> . instruction
    (5) instructions -> . instruction instructions
    (6) instructions -> . empty
    (7) instruction -> . loop
    (8) instruction -> . condition
    (9) instruction -> . var_assignment
    (10) instruction -> . read
    (11) instruction -> . write
    (12) instruction -> . empty
    (2) empty -> .
    (13) loop -> . LOOP LP comparisons RP LPC instructions RPC
    (14) condition -> . CONDITION LP comparisons RP LPC instructions RPC
    (20) var_assignment -> . NAME EQUAL number
    (21) var_assignment -> . NAME EQUAL NAME
    (22) var_assignment -> . NAME EQUAL math_operation
    (32) read -> . READ LP NAME RP
    (33) write -> . WRITE LP NAME RP

  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for CONDITION resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
    RPC             reduce using rule 2 (empty -> .)
    LOOP            shift and go to state 13
    CONDITION       shift and go to state 14
    NAME            shift and go to state 15
    READ            shift and go to state 16
    WRITE           shift and go to state 17

  ! LOOP            [ reduce using rule 2 (empty -> .) ]
  ! CONDITION       [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! READ            [ reduce using rule 2 (empty -> .) ]
  ! WRITE           [ reduce using rule 2 (empty -> .) ]

    instructions                   shift and go to state 58
    instruction                    shift and go to state 6
    empty                          shift and go to state 7
    loop                           shift and go to state 8
    condition                      shift and go to state 9
    var_assignment                 shift and go to state 10
    read                           shift and go to state 11
    write                          shift and go to state 12

state 54

    (27) math_operation -> NAME math_operator NAME .

    LOOP            reduce using rule 27 (math_operation -> NAME math_operator NAME .)
    CONDITION       reduce using rule 27 (math_operation -> NAME math_operator NAME .)
    NAME            reduce using rule 27 (math_operation -> NAME math_operator NAME .)
    READ            reduce using rule 27 (math_operation -> NAME math_operator NAME .)
    WRITE           reduce using rule 27 (math_operation -> NAME math_operator NAME .)
    RPC             reduce using rule 27 (math_operation -> NAME math_operator NAME .)


state 55

    (28) math_operation -> NAME math_operator number .

    LOOP            reduce using rule 28 (math_operation -> NAME math_operator number .)
    CONDITION       reduce using rule 28 (math_operation -> NAME math_operator number .)
    NAME            reduce using rule 28 (math_operation -> NAME math_operator number .)
    READ            reduce using rule 28 (math_operation -> NAME math_operator number .)
    WRITE           reduce using rule 28 (math_operation -> NAME math_operator number .)
    RPC             reduce using rule 28 (math_operation -> NAME math_operator number .)


state 56

    (29) math_operation -> number math_operator number .

    LOOP            reduce using rule 29 (math_operation -> number math_operator number .)
    CONDITION       reduce using rule 29 (math_operation -> number math_operator number .)
    NAME            reduce using rule 29 (math_operation -> number math_operator number .)
    READ            reduce using rule 29 (math_operation -> number math_operator number .)
    WRITE           reduce using rule 29 (math_operation -> number math_operator number .)
    RPC             reduce using rule 29 (math_operation -> number math_operator number .)


state 57

    (13) loop -> LOOP LP comparisons RP LPC instructions . RPC

    RPC             shift and go to state 59


state 58

    (14) condition -> CONDITION LP comparisons RP LPC instructions . RPC

    RPC             shift and go to state 60


state 59

    (13) loop -> LOOP LP comparisons RP LPC instructions RPC .

    LOOP            reduce using rule 13 (loop -> LOOP LP comparisons RP LPC instructions RPC .)
    CONDITION       reduce using rule 13 (loop -> LOOP LP comparisons RP LPC instructions RPC .)
    NAME            reduce using rule 13 (loop -> LOOP LP comparisons RP LPC instructions RPC .)
    READ            reduce using rule 13 (loop -> LOOP LP comparisons RP LPC instructions RPC .)
    WRITE           reduce using rule 13 (loop -> LOOP LP comparisons RP LPC instructions RPC .)
    RPC             reduce using rule 13 (loop -> LOOP LP comparisons RP LPC instructions RPC .)


state 60

    (14) condition -> CONDITION LP comparisons RP LPC instructions RPC .

    LOOP            reduce using rule 14 (condition -> CONDITION LP comparisons RP LPC instructions RPC .)
    CONDITION       reduce using rule 14 (condition -> CONDITION LP comparisons RP LPC instructions RPC .)
    NAME            reduce using rule 14 (condition -> CONDITION LP comparisons RP LPC instructions RPC .)
    READ            reduce using rule 14 (condition -> CONDITION LP comparisons RP LPC instructions RPC .)
    WRITE           reduce using rule 14 (condition -> CONDITION LP comparisons RP LPC instructions RPC .)
    RPC             reduce using rule 14 (condition -> CONDITION LP comparisons RP LPC instructions RPC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOOP in state 4 resolved as shift
WARNING: shift/reduce conflict for CONDITION in state 4 resolved as shift
WARNING: shift/reduce conflict for NAME in state 4 resolved as shift
WARNING: shift/reduce conflict for READ in state 4 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 4 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 6 resolved as shift
WARNING: shift/reduce conflict for CONDITION in state 6 resolved as shift
WARNING: shift/reduce conflict for NAME in state 6 resolved as shift
WARNING: shift/reduce conflict for READ in state 6 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 6 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 49 resolved as shift
WARNING: shift/reduce conflict for CONDITION in state 49 resolved as shift
WARNING: shift/reduce conflict for NAME in state 49 resolved as shift
WARNING: shift/reduce conflict for READ in state 49 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 49 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 53 resolved as shift
WARNING: shift/reduce conflict for CONDITION in state 53 resolved as shift
WARNING: shift/reduce conflict for NAME in state 53 resolved as shift
WARNING: shift/reduce conflict for READ in state 53 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 53 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (empty -> <empty>)
WARNING: rejected rule (instructions -> instruction) in state 6
WARNING: reduce/reduce conflict in state 7 resolved using rule (instructions -> empty)
WARNING: rejected rule (instruction -> empty) in state 7
WARNING: Rule (instructions -> instruction) is never reduced
